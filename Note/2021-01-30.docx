ajax
  需要动态生成，请求JSON数据
ajaxstu.html
-----------------------------------------------------
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>ajax</title>
    <script type="text/javascript" src="{% static '/myApp/js/jquery.min.js' %}"></script>
</head>
<body>
    <h1>Students List</h1>
    <button id="btn" >display</button>
    <script type="text/javascript" src="{% static '/myApp/js/js.js' %}"></script>

</body>
</html>
-----------------------------------------------------
views.py
-----------------------------------------------------
def ajaxStu(request):
    return render(request, 'myApp/ajaxstu.html')

def stuInfo(request):
    stuList = Students.stuObj2.all()
    # 数据放至列表
    list2 = []
    for stu in stuList:
        list2.append([stu.sname, stu.sage])
    return JsonResponse({'data': list2})
-----------------------------------------------------
urls.py
-----------------------------------------------------
    url(r'^ajaxstu/$', views.ajaxStu),
    url(r'^stuinfo/$', views.stuInfo),
-----------------------------------------------------
js.js
-----------------------------------------------------
$(document).ready(function () {
    document.getElementById('btn').onclick = function () {
        $.ajax({
            type: 'get',
            url: '/stuinfo',
            dataType: 'json',
            success: function (data, status) {
                console.log(data)
                var d = data['data']
                for (var i = 0; i < d.length; i++) {
                    document.write('<p>' + d[i][0] + '</p>')
                }
            }
        })
    }
})
-----------------------------------------------------



富文本
  pip install django-tinymce
  在站点中使用
settings.py
-----------------------------------------------------
# 富文本
TINYMCE_DEFAULT_CONFIG = {
    'theme': 'silver',
    'width': 600,
    'height': 400,
}
-----------------------------------------------------
models.py
-----------------------------------------------------
from tinymce.models import HTMLField


class Text(models.Model):
    str = HTMLField()
-----------------------------------------------------
admin.py
-----------------------------------------------------
from .models import Text

admin.site.register(Text)
-----------------------------------------------------
    访问 http://127.0.0.1:8000/admin/myApp/text/add/
  
celery
  问题
    用户发起request，并且要等待response返回，但是在视图中有一些耗时的操作，导致用户可能会等待很长时间
    网站每隔一段时间要同步一次数据，但是http请求是需要触发的
  celery来解决
    将耗时的操作放到celery中执行
    使用celery定时执行
  celery
    任务
      本质是一个python函数，将耗时操作封装成一个函数
    队列
      将要执行的任务放队列里
    工人
      负责执行队列中的任务
    代理
      负责调度，在部署环境中使用redis
    安装celery
      pip install celery
      pip install celery-with-redis
      pip install django-celery 

