反向解析
main.html
---------------------------------------------
  <a href="{% url 'myApp:detail' 2 %}">detail</a> {# {% url 'myApp:detail' 1 2 3 %} 可以传多个值，匹配则可 #}
--------------------------------------------
DjangoTest/urls.py
---------------------------------------------
  url(r'^', include(('myApp.urls', 'myApp'), namespace='myApp')),
---------------------------------------------
myApp/urls.py
---------------------------------------------
  url(r'^detail/(\d+)/$', views.detail, name='detail'),
---------------------------------------------
  访问 http://127.0.0.1:8000/main/ 点击 detail
  
模板继承
  作用 -- 模板继承可以减少页面的内容的重复定义，实现页面的重用
  block标签
    在父模板中预留区域，子模板去填充
    语法
      {% block 标签名(id) %}
      {% endblock 标签名 %}
  extends标签
    继承模板，需要写在模板文件的第一行
    语法
      {% extends '父模板路径' %}
templates/myApp/main.html
---------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>mine</title>
</head>
<body>
    {% extends 'myApp/base.html' %}

    {%  block main %}
    <h1>Welcome: {{ username }}</h1>
    <a href="/login">login</a>
    <a href="/logout" >logout</a>
    <a href="{% url 'myApp:detail' 2 %}">detail</a>
    {%  endblock main %}
</body>
</html>
---------------------------------------------
templates/myApp/base.html
---------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <div id="header" style="background-color: cadetblue; height: 100px">header</div>
    <div id="main">
        {% block main %}

        {% endblock main %}
    </div>
    <div id="footer" style="background-color: cornflowerblue; height: 100px">footer</div>
</body>
</html>
---------------------------------------------
  访问 http://127.0.0.1:8000/main/
  * 可在一个页面定义多个block

html转义
  对于
---------------------------------------------
return render(request, 'myApp/students.html', {'code': '<h1>asdfghjkl</h1>'})
---------------------------------------------
    # 未转义
    {{ code }}
    {{ code|escape }}
    # 转义
    {{ code|safe }}
    # 可多行代码转义
    {% autoescape off %}
        {{ code }}
    {% endautoescape %}
---------------------------------------------
    
csrf
  跨站请求伪造
    某些恶意网站包含链接、表单、按钮、JS会利用登录用户在浏览器中认证，从而攻击服务
    1. 在 settings.py - MIDDLEWARE 中加上
        'django.middleware.csrf.CsrfViewMiddleware',
    2. form表单里加上 {% csrf_token %}
原 login.html
---------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>登录</title>
</head>
<body>
    <form action="showmain/" method="post">
        {# {% csrf_token %} #}
        <input type="text" name="username" />
        <br/>
        <input type="password" name="pwd" />
        <br/>
        <input type="submit" value="submit" />
    </form>
</body>
</html>
---------------------------------------------
不使用csrf时，在本地copy项目代码如下
---------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>登录</title>
</head>
<body>
    <form action="http://127.0.0.1:8000/login/showmain/" method="post">

        <input type="text" name="username" />
        <br/>
        <input type="password" name="pwd" />
        <br/>
        <input type="submit" value="submit" />
    </form>
</body>
</html>
---------------------------------------------
可实现页面访问，提交表单后未被禁止访问
使用csrf时，在本地copy项目代码如下
---------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>登录</title>
</head>
<body>
    <form action="showmain/" method="post">
        <input type="hidden" name="csrfmiddlewaretoken" value="BPNsHkjennu4smQgWrB9y3fBoyL8h3KqLI2hBIWsIhSZvuu1wzSVp70aHqWIM0w9">
        <input type="text" name="username" />
        <br/>
        <input type="password" name="pwd" />
        <br/>
        <input type="submit" value="submit" />
    </form>
</body>
</html>
---------------------------------------------
没有绝对安全

验证码
  作用 -- 在用户注册、登录页面时使用，为了防止暴力请求，减轻服务器压力；防止csrf的一种方式
  

Django高级扩展
  静态文件
    css, js, img, json, font文件等
================================
DjangoTest
  |____ static（和tempaltes平级）
          |____ css
          |____ img
          |____ js
          |____ json
          |____ font
          |____ other
================================
settings.py加上
--------------------------------------
STATIC_ROOT = 'static'
--------------------------------------
与settings.py平级的urls.py加上
--------------------------------------
from django.views import static
from django.conf import settings

    url(r'^static/(?P<path>.*)$', static.serve, {'document_root': settings.STATIC_ROOT}, name='static')
--------------------------------------
在html中使用时
--------------------------------------
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>学生信息</title>
{#    <link rel="stylesheet" type="text/css" href="/static/myApp/css/style.css"/>#}
    <link rel="stylesheet" type="text/css" href="{% static '/myApp/css/style.css' %}"/>
    <script type="text/javascript" src="{% static '/myApp/js/js.js' %}"></script>
</head>
<body>
    <img src="{% static '/myApp/img/lgqj.jpg' %}" alt="load failed">
</body>
</html>
       
中间件
  一个轻量级、底层的插件，可以介入django的请求和响应
  本质：一个python类
  方法
    __init__
      不需要传参数，服务器响应第一个请求的时候自动调用，用于确定是否启用该中间件
    process_request(self, request)
      在执行视图之前被调用（分配url匹配视图之前），每个请求上都会调用，返回None或者HttpResponse对象
    process_view(self, request, view, func, view, args, view, kwargs)
      调用视图之前，每个请求都会调用，返回None或者HttpResponse对象
    process_template_response(self, request, response)
      在视图刚好执行完后调用，每个请求都会调用，返回None或者HttpResponse对象
      使用render
    process_response(self, request, response)
      所有响应返回浏览器之前调用，每个请求都会调用，返回None或者HttpResponse对象
    process_exception(self, request, response)
      当视图抛出异常时调用，返回HttpResponse对象
   ======================================
   --process_request--> url --process_view--> view --process_template_response--> templates --process_response-->
   ======================================
  定义中间件 
    创建文件（自定义中间件）
======================================
middleware
  |____ myApp
          |____ myMiddle.py
======================================
myMiddle.py
---------------------------------------------
from django.utils.deprecation import MiddlewareMixin

class MyMiddle(MiddlewareMixin):
    def process_request(self, request):
        a = request.GET.get('a')
        print('parameter -- get: ', a)
---------------------------------------------
settings.py - MIDDLEWARE 加上
---------------------------------------------
'middleware.myApp.myMiddle.MyMiddle'    # 路径
---------------------------------------------
    访问有效网站时 -- 如 http://127.0.0.1:8000/get1?a=1&b=2&c=3
    可见黑屏终端有打印 parameter -- get:  1
    
  上传图片
    概述 -- 文件上传时，文件数据存储在request.FILE属性中
    存储路径
      在static目录下创建upfile目录用于存储接收上传的文件
      配置settings.py文件
        MEDIA_ROOT = os.path.join(BASE_DIR, r'static\upfile')   # windows下的路径
upfile.html
---------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>upfile</title>
</head>
<body>
    <form method="post" action="/savefile/" enctype="multipart/form-data">
        {% csrf_token %}
        <input type="file" name="file" />
        <input type="submit" value="submit"/>
    </form>
</body>
</html>
---------------------------------------------
urls.py
---------------------------------------------
    url(r'^upfile/$', views.upfile),
    url(r'^savefile/$', views.savefile),
---------------------------------------------
views.py
---------------------------------------------
def upfile(request):
    return render(request, 'myApp/upfile.html')

def savefile(request):
    if request.method == 'POST':
        f = request.FILES['file']
        filePath = os.path.join(settings.MEDIA_ROOT, f.name)
        with open(filePath, 'wb') as fp:
            for info in f.chunks():     # 文件流分段
                fp.write(info)
        return HttpResponse('upload file succeed')
    else:
        return HttpResponse('upload file failed')
---------------------------------------------
    可见static/upfile下新增文件
    
  分页
    Paginator对象
      创建对象
        格式 -- Paginator(列表，整数)
        返回值 -- 返回的分页对象
      属性
        count -- 对象总数
        num_pages -- 页面总数
        page_range -- 页码列表，{1, 2, 3, 4, 5}，页码从1开始
      方法
        page{num} -- 获得一个Page对象，如果提供的页码不存在，会抛出InvalidPage异常
      异常
        1. InvalidPage -- 当向page()传递的是一个无效的页码时抛出
        2. PageNotAnInteger -- 当向page()传递的不是一个整数
        3. EmptyPage -- 当向page()传递一个有效值，但是该页面没有数据时抛出
    Page对象
      创建对象 -- Paginator对象的page()方法返回得到Page()对象
      属性
        1. object_list -- 当前页上所有的数据（对象）列表
        2. number -- 当前页的页码值
        3. paginator -- 当前page对象关联的paginator对象
      方法
        1. has_next() -- 判断是否有下一页，有则True
        2. has_previous() -- 判断是否上一页，有则True
        3. has_other_pages() -- 判断是否有上一页或下一页，有则True
        4. next_page_number() -- 返回下一页的页码，若下一页不存在则InvalidPage异常
        5. previous_page_number() -- 返回上一页的页码，若上一页不存在则InvalidPage异常
        6. len() -- 返回当前页的数据（对象）个数
    Paginator和Page的关系
 
